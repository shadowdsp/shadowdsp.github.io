<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MIT6.824 2020 Lab2 A Raft Leader Election</title>
      <link href="/2021/09/05/MIT6-824-2020-Lab2-A-Raft-Leader-Election/"/>
      <url>/2021/09/05/MIT6-824-2020-Lab2-A-Raft-Leader-Election/</url>
      
        <content type="html"><![CDATA[<h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><ol><li>实验：<a href="http://nil.csail.mit.edu/6.824/2020/labs/lab-raft.html" target="_blank" rel="noopener">http://nil.csail.mit.edu/6.824/2020/labs/lab-raft.html</a> 的 Part 2A.</li><li><p>论文：</p><ol><li>英文版：<a href="https://raft.github.io/raft.pdf" target="_blank" rel="noopener">https://raft.github.io/raft.pdf</a></li><li><p>中文版：<a href="https://github.com/maemual/raft-zh_cn/blob/master/raft-zh_cn.md" target="_blank" rel="noopener">https://github.com/maemual/raft-zh_cn/blob/master/raft-zh_cn.md</a></p><p>论文只要求看完 Section 5 即可。</p><p>其中个人认为主要需要看的几个点在于：</p></li></ol><ul><li>Figure 2 &amp; 3.</li><li>Section 5.1</li><li>Section 5.2</li><li>Section 5.4.1</li></ul></li></ol><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Lab 2A 是实现 Leader Election。它主要关心各个角色的状态切换，以及对于 AppendEntries RPC 和 RequestVote RPC 的请求响应。因为在 Lab 2A 的测试中并不会有日志相关的操作，所以我们也暂时不需要关心太多日志相关的内容。</p><h2 id="Followers"><a href="#Followers" class="headerlink" title="Followers"></a>Followers</h2><ul><li>响应所有来自 leader 和 candidate 的 RPC 请求。</li><li>如果在选举时间超时前，没有收到来自当前 leader 的 AppendEntries RPC（心跳检测），或者没有投票给 candidate，则将自己的状态变成 candidate（这里之前有些误解了，直到看了 <a href="https://thesquareplanet.com/blog/students-guide-to-raft/" target="_blank" rel="noopener">Guide</a> 里面的说法，才知道第二个条件实际对应的是在 RequestVote RPC 中，如果投票给 candidate，则重置选举超时器）。</li></ul><h2 id="Candidates"><a href="#Candidates" class="headerlink" title="Candidates"></a>Candidates</h2><ul><li>当状态变为 Candidate 的时候，开始进行选举：<ol><li>递增当前的 term；</li><li>投票给自己；</li><li>重置选举超时计时器；</li><li>发送 RequestVote RPC 给其他的服务器。</li></ol></li><li>选举的终止条件以及对应操作：<ol><li>如果在选举过程中收到大多数的选票，则将自身状态变成 leader。</li><li>如果从新的 leader 接收到了 AppendEntries RPC（心跳检测），则将自身状态变成 follower。</li><li>如果选举超时，则重新进行新一轮的选举。</li></ol></li></ul><h2 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h2><ul><li>当状态变为 Leader 的时候，立即发送 AppendEntries RPC（心跳检测）给其他所有 server。</li><li>（My Hint：当发送心跳检测不能及时收到大多数 Follower 的响应时，将自己的状态变成 Follower。</li></ul><h2 id="All-Servers"><a href="#All-Servers" class="headerlink" title="All Servers"></a>All Servers</h2><ul><li>在进行<strong>请求或者响应</strong>来自其他 server 的 RPC 时，若发现其他 server 的 term 大于当前 server 的 term，则将当前 server 的 term 更新为其他 server 的 term。</li></ul><h2 id="RequestVote-RPC"><a href="#RequestVote-RPC" class="headerlink" title="RequestVote RPC"></a>RequestVote RPC</h2><ul><li>如果 <code>args.Term &lt; rf.currentTerm</code>，则直接返回 <code>false</code> 。</li><li>如果自己没有投票给其他人或者投给了 candidateID，则重置选举超时器并返回 <code>true</code> 。</li></ul><h2 id="AppendEntries-RPC"><a href="#AppendEntries-RPC" class="headerlink" title="AppendEntries RPC"></a>AppendEntries RPC</h2><ul><li>如果 <code>args.Term &lt; rf.currentTerm</code>，则直接返回 <code>false</code> 。</li><li>重置选举超时器。</li><li>如果当前状态是 candidate 并且发送者的 term 没有过期，状态变为 follower。</li></ul><h1 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h1><p>Lab 2A 的代码是放在 <code>src/raft</code> 里面，我们需要实现 <code>raft.go</code> 中的一部分。</p><p>我的具体实现放在 github 中 <a href="https://github.com/shadowdsp/mit6.824" target="_blank" rel="noopener">https://github.com/shadowdsp/mit6.824</a> .</p><h2 id="Flow-Chart"><a href="#Flow-Chart" class="headerlink" title="Flow Chart"></a>Flow Chart</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu5lxgle37j60h60i675802.jpg" alt="https://tva1.sinaimg.cn/large/008i3skNgy1gu5lxgle37j60h60i675802.jpg"></p><h2 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h2><h3 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h3><p>Raft 的数据结构我们可以看论文中 Figure 2 进行填充，并且补充一些在选举时刻必要的变量。关于日志相关的属性暂时用不到。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">Leader    = State(<span class="string">"Leader"</span>)</span><br><span class="line">Candidate = State(<span class="string">"Candidate"</span>)</span><br><span class="line">Follower  = State(<span class="string">"Follower"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Raft <span class="keyword">struct</span> &#123;</span><br><span class="line">mu        sync.Mutex          <span class="comment">// Lock to protect shared access to this peer's state</span></span><br><span class="line">peers     []*labrpc.ClientEnd <span class="comment">// RPC end points of all peers</span></span><br><span class="line">persister *Persister          <span class="comment">// Object to hold this peer's persisted state</span></span><br><span class="line">me        <span class="keyword">int</span>                 <span class="comment">// this peer's index into peers[]</span></span><br><span class="line">dead      <span class="keyword">int32</span>               <span class="comment">// set by Kill()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Your data here (2A, 2B, 2C).</span></span><br><span class="line"><span class="comment">// Look at the paper's Figure 2 for a description of what</span></span><br><span class="line"><span class="comment">// state a Raft server must maintain.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 follower, 2 candidate, 3 leader</span></span><br><span class="line">state State</span><br><span class="line"></span><br><span class="line"><span class="comment">// Persistent state on server</span></span><br><span class="line">currentTerm <span class="keyword">int</span></span><br><span class="line"><span class="comment">// votedFor initial state is -1</span></span><br><span class="line">votedFor <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// follower election timeout timestamp</span></span><br><span class="line">electionTimeoutAt time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>领导选举主要涉及两个 RPC：RequestVote 以及 AppendEntries，每个分别对应了请求 Args 和响应 Reply。为了方便 debug，也可以在请求或者响应里面加上 <code>ServerID</code> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RequestVoteArgs <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Your data here (2A, 2B).</span></span><br><span class="line">Term         <span class="keyword">int</span></span><br><span class="line">CandidateID  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RequestVoteReply <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Your data here (2A).</span></span><br><span class="line">Term        <span class="keyword">int</span></span><br><span class="line">VoteGranted <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AppendEntriesArgs <span class="keyword">struct</span> &#123;</span><br><span class="line">Term <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AppendEntriesReply <span class="keyword">struct</span> &#123;</span><br><span class="line">Term <span class="keyword">int</span></span><br><span class="line"><span class="comment">// true if follower contained entry matching prevLogIndex and prevLogTerm</span></span><br><span class="line">Success <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><p>Raft 程序是由  <code>Make</code> 函数来启动的。在 <code>Make</code> 中，我主要是初始化 raft 对象，然后调用 <code>go rf.run(ctx)</code> 来运行 raft 程序主体。</p><p>初始的时候，raft 的状态为 <code>Follower</code> ，并且投票为 <code>-1</code> 表示还未投票。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rf := &amp;Raft&#123;</span><br><span class="line">peers:     peers,</span><br><span class="line">persister: persister,</span><br><span class="line">me:        me,</span><br><span class="line">state:     Follower,</span><br><span class="line">votedFor:  <span class="number">-1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Your initialization code here (2A, 2B, 2C).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize from state persisted before a crash</span></span><br><span class="line">rf.readPersist(persister.ReadRaftState())</span><br><span class="line"></span><br><span class="line">ctx := context.Background()</span><br><span class="line"><span class="keyword">go</span> rf.run(ctx)</span><br></pre></td></tr></table></figure><p><code>rf.run()</code> 主要是对 raft 状态的进行判断，并根据状态执行不同的操作。</p><p>这里加了 <code>time.Sleep(10ms)</code> 是因为我跑了 100 个 test，在后面会发现有锁冲突的情况。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">run</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Millisecond)</span><br><span class="line">state := rf.getState()</span><br><span class="line"><span class="keyword">switch</span> state &#123;</span><br><span class="line"><span class="keyword">case</span> Follower:</span><br><span class="line">...  <span class="comment">// check timeout and convert to cdd</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> Candidate:</span><br><span class="line">...  <span class="comment">// elect leader</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> Leader:</span><br><span class="line">...  <span class="comment">// send heartbeats</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"Server %v is in unknown state %v"</span>, rf.me, rf.state))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是按照 Figure2 中提到的，去填充每个 state 以及 RPC 的逻辑。</p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>当我们将程序写完，使用 <code>go test -run 2A</code> 去执行测试。</p><p>强烈建议将 <code>TestReElection2A</code> 改成循环运行多次，我这里是运行 100 次，否则极大可能只是概率性地通过。概率性地通过意味着程序并不是正确的。</p><p>虽然我能通过 100 次也是加了一些 hack，例如在某些位置加了 sleep，以及调整了超时时间等，并不说明我的程序是完全正确的。</p><p>如果我的程序有什么问题，求指正，谢谢！！！</p><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>在测试的过程中，我陆续解决了一些问题，可能对你会有帮助。</p><blockquote><p>实现 Figure2 - Rules for Servers - All servers 中的第二条规则时，不要忽略了 server 在收到 rpc 响应的时候也要检查 reply.Term 去更新状态。</p></blockquote><p>这一点在看论文的时候不够仔细，导致出错。</p><blockquote><p>Follower 心跳检测的 timeout 和 candidate 选举的 timeout 都是 electionTimeout。</p></blockquote><p>最开始我是用两个 timeout 去表示的，发现实现起来很奇怪，后面改成使用同一个。</p><blockquote><p>并发编程需要注意死锁以及 goroutine 泄漏。</p></blockquote><p>死锁这个还好，只要报错基本能定位到哪里的问题。</p><p>Goroutine 泄漏体现于在 goroutine 中使用 channel，如果最后这个 channel 不会被关闭，那么这个 goroutine 会一直存活。</p><blockquote><p>当 Leader 发出心跳检测后，如果不能及时收到大多数节点的回复，需要变成 Follower。</p></blockquote><p>我在测试 <code>TestReElection2A</code> 的过程中，发现跑了十几次后，经常在 <code>checkNoLeader()</code> 挂了。这是测试三个 server 都出现网络分区的情况。在此时，三个 server 都应该是 Follower state，因此需要加上这个机制。这里我的实现是，在 leader send heartbeats 时，对 rpc 的执行添加超时时间，使用 <code>time.After()</code> 去完成。</p><p>这里还有 MIT 助教写的参考指南 <a href="https://thesquareplanet.com/blog/students-guide-to-raft/" target="_blank" rel="noopener">https://thesquareplanet.com/blog/students-guide-to-raft/</a></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Raft leader election 的理论相对容易，实现起来如果有问题，还是如同 Hint 里面说的，多看几遍 <code>Figure 2</code> : ).</p><blockquote><p>If your code has trouble passing the tests, read the paper’s Figure 2 again; the full logic for leader election is spread over multiple parts of the figure.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>k8s调度器及调度队列源码分析</title>
      <link href="/2021/06/08/k8s%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8F%8A%E8%B0%83%E5%BA%A6%E9%98%9F%E5%88%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2021/06/08/k8s%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8F%8A%E8%B0%83%E5%BA%A6%E9%98%9F%E5%88%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 Kubernetes 中，调度是指将 Pod 放置到合适的 Node 上，然后对应 Node 上的 kubelet 才能够运行这些 Pod。K8s scheduler 就是用来调度 pod 的一个组件。</p><p>本文主要是通过源码了解调度器的部分工作流程。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gret8c75llj30kg0g3glr.jpg" alt="调度器流程图"></p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><blockquote><p>Based on Kubernetes  v1.19.11.</p></blockquote><p>K8s scheduler 主要的数据结构是：</p><ol><li>Scheduler。</li><li>SchedulingQueue。</li></ol><p>相关的代码流程主要分为两个部分：</p><ol><li><code>cmd/kube-scheduler</code>，这里是我们调度器的起始处，主要是读取配置，初始化并启动调度器。</li><li><code>pkg/scheduler</code>，这里是调度器的核心代码。</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pkg/scheduler/scheduler.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Scheduler watches for new unscheduled pods. It attempts to find</span></span><br><span class="line"><span class="comment">// nodes that they fit on and writes bindings back to the api server.</span></span><br><span class="line"><span class="keyword">type</span> Scheduler <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// It is expected that changes made via SchedulerCache will be observed</span></span><br><span class="line">    <span class="comment">// by NodeLister and Algorithm.</span></span><br><span class="line">    SchedulerCache internalcache.Cache</span><br><span class="line">    Algorithm core.ScheduleAlgorithm</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NextPod should be a function that blocks until the next pod</span></span><br><span class="line">    <span class="comment">// is available. We don't use a channel for this, because scheduling</span></span><br><span class="line">    <span class="comment">// a pod may take some amount of time and we don't want pods to get</span></span><br><span class="line">    <span class="comment">// stale while they sit in a channel.</span></span><br><span class="line">    NextPod <span class="function"><span class="keyword">func</span><span class="params">()</span> *<span class="title">framework</span>.<span class="title">QueuedPodInfo</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // <span class="title">Error</span> <span class="title">is</span> <span class="title">called</span> <span class="title">if</span> <span class="title">there</span> <span class="title">is</span> <span class="title">an</span> <span class="title">error</span>. <span class="title">It</span> <span class="title">is</span> <span class="title">passed</span> <span class="title">the</span> <span class="title">pod</span> <span class="title">in</span></span></span><br><span class="line"><span class="function">    // <span class="title">question</span>, <span class="title">and</span> <span class="title">the</span> <span class="title">error</span></span></span><br><span class="line"><span class="function">    <span class="title">Error</span> <span class="title">func</span><span class="params">(*framework.QueuedPodInfo, error)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // <span class="title">Close</span> <span class="title">this</span> <span class="title">to</span> <span class="title">shut</span> <span class="title">down</span> <span class="title">the</span> <span class="title">scheduler</span>.</span></span><br><span class="line"><span class="function">    <span class="title">StopEverything</span> &lt;-<span class="title">chan</span> <span class="title">struct</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SchedulingQueue holds pods to be scheduled</span></span><br><span class="line">    SchedulingQueue internalqueue.SchedulingQueue</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Profiles are the scheduling profiles.</span></span><br><span class="line">    Profiles profile.Map</span><br><span class="line"></span><br><span class="line">    scheduledPodsHasSynced <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function">    <span class="title">client</span> <span class="title">clientset</span>.<span class="title">Interface</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><ol><li><code>SchedulerCache</code> ，保存了调度所需的 podStates 和 nodeInfos。</li><li><code>Algorithm</code> ，会使用该对象的 <code>Schedule</code> 方法来运行调度逻辑。</li><li><code>SchedulingQueue</code> ，调度队列。</li><li><code>Profiles</code> ，调度器配置。</li></ol><h3 id="SchedulingQueue"><a href="#SchedulingQueue" class="headerlink" title="SchedulingQueue"></a>SchedulingQueue</h3><blockquote><p>Interface</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pkg/scheduler/internal/queue/scheduling_queue.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SchedulingQueue is an interface for a queue to store pods waiting to be scheduled.</span></span><br><span class="line"><span class="comment">// The interface follows a pattern similar to cache.FIFO and cache.Heap and</span></span><br><span class="line"><span class="comment">// makes it easy to use those data structures as a SchedulingQueue.</span></span><br><span class="line"><span class="keyword">type</span> SchedulingQueue <span class="keyword">interface</span> &#123;</span><br><span class="line">    framework.PodNominator</span><br><span class="line">    Add(pod *v1.Pod) error</span><br><span class="line">    <span class="comment">// AddUnschedulableIfNotPresent adds an unschedulable pod back to scheduling queue.</span></span><br><span class="line">    <span class="comment">// The podSchedulingCycle represents the current scheduling cycle number which can be</span></span><br><span class="line">    <span class="comment">// returned by calling SchedulingCycle().</span></span><br><span class="line">    AddUnschedulableIfNotPresent(pod *framework.QueuedPodInfo, podSchedulingCycle <span class="keyword">int64</span>) error</span><br><span class="line">    <span class="comment">// SchedulingCycle returns the current number of scheduling cycle which is</span></span><br><span class="line">    <span class="comment">// cached by scheduling queue. Normally, incrementing this number whenever</span></span><br><span class="line">    <span class="comment">// a pod is popped (e.g. called Pop()) is enough.</span></span><br><span class="line">    SchedulingCycle() <span class="keyword">int64</span></span><br><span class="line">    <span class="comment">// Pop removes the head of the queue and returns it. It blocks if the</span></span><br><span class="line">    <span class="comment">// queue is empty and waits until a new item is added to the queue.</span></span><br><span class="line">    Pop() (*framework.QueuedPodInfo, error)</span><br><span class="line">    Update(oldPod, newPod *v1.Pod) error</span><br><span class="line">    Delete(pod *v1.Pod) error</span><br><span class="line">    MoveAllToActiveOrBackoffQueue(event <span class="keyword">string</span>)</span><br><span class="line">    AssignedPodAdded(pod *v1.Pod)</span><br><span class="line">    AssignedPodUpdated(pod *v1.Pod)</span><br><span class="line">    PendingPods() []*v1.Pod</span><br><span class="line">    <span class="comment">// Close closes the SchedulingQueue so that the goroutine which is</span></span><br><span class="line">    <span class="comment">// waiting to pop items can exit gracefully.</span></span><br><span class="line">    Close()</span><br><span class="line">    <span class="comment">// NumUnschedulablePods returns the number of unschedulable pods exist in the SchedulingQueue.</span></span><br><span class="line">    NumUnschedulablePods() <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// Run starts the goroutines managing the queue.</span></span><br><span class="line">    Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Implementation</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PriorityQueue implements a scheduling queue.</span></span><br><span class="line"><span class="comment">// The head of PriorityQueue is the highest priority pending pod. This structure</span></span><br><span class="line"><span class="comment">// has three sub queues. One sub-queue holds pods that are being considered for</span></span><br><span class="line"><span class="comment">// scheduling. This is called activeQ and is a Heap. Another queue holds</span></span><br><span class="line"><span class="comment">// pods that are already tried and are determined to be unschedulable. The latter</span></span><br><span class="line"><span class="comment">// is called unschedulableQ. The third queue holds pods that are moved from</span></span><br><span class="line"><span class="comment">// unschedulable queues and will be moved to active queue when backoff are completed.</span></span><br><span class="line"><span class="keyword">type</span> PriorityQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// PodNominator abstracts the operations to maintain nominated Pods.</span></span><br><span class="line">    framework.PodNominator</span><br><span class="line">    stop  <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    clock util.Clock</span><br><span class="line">    <span class="comment">// pod initial backoff duration.</span></span><br><span class="line">    podInitialBackoffDuration time.Duration</span><br><span class="line">    <span class="comment">// pod maximum backoff duration.</span></span><br><span class="line">    podMaxBackoffDuration time.Duration</span><br><span class="line"></span><br><span class="line">    lock sync.RWMutex</span><br><span class="line">    cond sync.Cond</span><br><span class="line">    <span class="comment">// activeQ is heap structure that scheduler actively looks at to find pods to</span></span><br><span class="line">    <span class="comment">// schedule. Head of heap is the highest priority pod.</span></span><br><span class="line">    activeQ *heap.Heap</span><br><span class="line"></span><br><span class="line">    <span class="comment">// podBackoffQ is a heap ordered by backoff expiry. Pods which have completed backoff</span></span><br><span class="line">    <span class="comment">// are popped from this heap before the scheduler looks at activeQ</span></span><br><span class="line">    podBackoffQ *heap.Heap</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unschedulableQ holds pods that have been tried and determined unschedulable.</span></span><br><span class="line">    unschedulableQ *UnschedulablePodsMap</span><br><span class="line"></span><br><span class="line">    <span class="comment">// schedulingCycle represents sequence number of scheduling cycle and is incremented</span></span><br><span class="line">    <span class="comment">// when a pod is popped.</span></span><br><span class="line">    schedulingCycle <span class="keyword">int64</span></span><br><span class="line">    <span class="comment">// moveRequestCycle caches the sequence number of scheduling cycle when we</span></span><br><span class="line">    <span class="comment">// received a move request. Unscheduable pods in and before this scheduling</span></span><br><span class="line">    <span class="comment">// cycle will be put back to activeQueue if we were trying to schedule them</span></span><br><span class="line">    <span class="comment">// when we received move request.</span></span><br><span class="line">    moveRequestCycle <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// closed indicates that the queue is closed.</span></span><br><span class="line">    <span class="comment">// It is mainly used to let Pop() exit its control loop while waiting for an item.</span></span><br><span class="line">    closed <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>PodNominator：调度算法调度的结果，保存了 Pod 和 Node 的关系。</li><li>cond：用来控制调度队列的 Pop 操作。</li><li>activeQ：用堆维护的优先队列，保存着待调度的 pod，其中优先级默认是根据 Pod 的优先级和创建时间来排序。</li><li>podBackoffQ：同样是用堆维护的优先队列，保存着运行失败的 Pod，优先级是根据 <code>backOffTime</code> 来排序，<code>backOffTime</code> 受 <code>podInitialBackoffDuration</code> 以及 <code>podMaxBackoffDuration</code> 两个参数影响。</li><li>unschedulableQ：是一个 Map 结构，保存着暂时无法调度（可能是资源不满足等情况）的 Pod。</li></ol><h2 id="cmd-kube-scheduler"><a href="#cmd-kube-scheduler" class="headerlink" title="cmd/kube-scheduler"></a>cmd/kube-scheduler</h2><h3 id="调度器的入口-main"><a href="#调度器的入口-main" class="headerlink" title="调度器的入口 main"></a>调度器的入口 main</h3><p>最开始，scheduler 在 <code>cmd/kube-scheduler/scheduler.go</code> 使用 <code>NewSchedulerCommand()</code> 初始化命令并执行命令。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cmd/kube-scheduler/scheduler.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    command := app.NewSchedulerCommand()</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> err := command.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化调度器命令-NewSchedulerCommand"><a href="#初始化调度器命令-NewSchedulerCommand" class="headerlink" title="初始化调度器命令 NewSchedulerCommand"></a>初始化调度器命令 NewSchedulerCommand</h3><p><code>NewSchedulerCommand()</code> 会读取配置文件和参数，初始化调度命令，其中最主要的函数是 <code>runCommand()</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSchedulerCommand</span><span class="params">(registryOptions ...Option)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    cmd := &amp;cobra.Command&#123;</span><br><span class="line">        Use: <span class="string">"kube-scheduler"</span>,</span><br><span class="line">        ...</span><br><span class="line">        Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> err := runCommand(cmd, opts, registryOptions...); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                fmt.Fprintf(os.Stderr, <span class="string">"%v\n"</span>, err)</span><br><span class="line">                os.Exit(<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行调度器命令-runCommand"><a href="#执行调度器命令-runCommand" class="headerlink" title="执行调度器命令 runCommand"></a>执行调度器命令 runCommand</h3><p><code>runCommand</code> 主要分为两个重要步骤：</p><ol><li><code>Setup</code> ：读取配置文件以及参数，初始化调度器。这里的配置文件包括 Profiles 配置等。</li><li><code>Run</code>：运行调度器所需的组件，例如健康检查服务，Informer 等。然后使用 <code>Setup</code> 得到的调度器运行调度的主流程。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runCommand</span><span class="params">(cmd *cobra.Command, opts *options.Options, registryOptions ...Option)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    cc, sched, err := Setup(ctx, opts, registryOptions...)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Run(ctx, cc, sched)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建调度器-Setup"><a href="#创建调度器-Setup" class="headerlink" title="创建调度器 Setup"></a>创建调度器 Setup</h3><p><code>Setup</code> 会根据配置文件和参数创建 scheduler。这里个人觉得最主要的是 Profiles，里面定义了调度器的名字，以及 scheduling framework 的插件配置。还有一些可以用来调优的参数，例如 <code>PercentageOfNodesToScore</code>, <code>PodInitialBackoffSeconds</code> , <code>PodMaxBackoffSeconds</code> 等。</p><p>并且 <code>scheduler.New()</code> 中会有一个 <code>addAllEventHandlers(sched, informerFactory, podInformer)</code> 函数，启动所有资源对象的事件监听，来根据情况调用对应的回调函数，这些回调函数同时也会影响调度队列的运行过程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Setup</span><span class="params">(ctx context.Context, opts *options.Options, outOfTreeRegistryOptions ...Option)</span> <span class="params">(*schedulerserverconfig.CompletedConfig, *scheduler.Scheduler, error)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Create the scheduler.</span></span><br><span class="line">    sched, err := scheduler.New(cc.Client,</span><br><span class="line">        cc.InformerFactory,</span><br><span class="line">        cc.PodInformer,</span><br><span class="line">        recorderFactory,</span><br><span class="line">        ctx.Done(),</span><br><span class="line">        scheduler.WithProfiles(cc.ComponentConfig.Profiles...),</span><br><span class="line">        scheduler.WithAlgorithmSource(cc.ComponentConfig.AlgorithmSource),</span><br><span class="line">        scheduler.WithPercentageOfNodesToScore(cc.ComponentConfig.PercentageOfNodesToScore),</span><br><span class="line">        scheduler.WithFrameworkOutOfTreeRegistry(outOfTreeRegistry),</span><br><span class="line">        scheduler.WithPodMaxBackoffSeconds(cc.ComponentConfig.PodMaxBackoffSeconds),</span><br><span class="line">        scheduler.WithPodInitialBackoffSeconds(cc.ComponentConfig.PodInitialBackoffSeconds),</span><br><span class="line">        scheduler.WithExtenders(cc.ComponentConfig.Extenders...),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;cc, sched, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行调度器-Run"><a href="#运行调度器-Run" class="headerlink" title="运行调度器 Run"></a>运行调度器 Run</h3><p><code>Run</code> 主要是启动一些组件，然后调用 <code>sched.Run(ctx)</code> 进行调度的主流程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">(ctx context.Context, cc *schedulerserverconfig.CompletedConfig, sched *scheduler.Scheduler)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Prepare the event broadcaster.</span></span><br><span class="line">    cc.EventBroadcaster.StartRecordingToSink(ctx.Done())</span><br><span class="line">    <span class="comment">// Setup healthz checks.</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Start up the healthz server.</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Start all informers.</span></span><br><span class="line">    <span class="keyword">go</span> cc.PodInformer.Informer().Run(ctx.Done())</span><br><span class="line">    cc.InformerFactory.Start(ctx.Done())</span><br><span class="line">    <span class="comment">// Wait for all caches to sync before scheduling.</span></span><br><span class="line">    cc.InformerFactory.WaitForCacheSync(ctx.Done())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If leader election is enabled, runCommand via LeaderElector until done and exit.</span></span><br><span class="line">    <span class="comment">// Leader election</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Leader election is disabled, so runCommand inline until done.</span></span><br><span class="line">    sched.Run(ctx)</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"finished without leader elect"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pkg-scheduler"><a href="#pkg-scheduler" class="headerlink" title="pkg/scheduler"></a>pkg/scheduler</h2><h3 id="运行调度器主流程"><a href="#运行调度器主流程" class="headerlink" title="运行调度器主流程"></a>运行调度器主流程</h3><p><code>Run</code> 会启动 scheduling queue，并不断调用 <code>sched.scheduleOne()</code> 进行调度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run begins watching and scheduling. It waits for cache to be synced, then starts scheduling and blocked until the context is done.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sched *Scheduler)</span> <span class="title">Run</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !cache.WaitForCacheSync(ctx.Done(), sched.scheduledPodsHasSynced) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sched.SchedulingQueue.Run()</span><br><span class="line">    wait.UntilWithContext(ctx, sched.scheduleOne, <span class="number">0</span>)</span><br><span class="line">    sched.SchedulingQueue.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行调度队列"><a href="#运行调度队列" class="headerlink" title="运行调度队列"></a>运行调度队列</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run starts the goroutine to pump from podBackoffQ to activeQ</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> wait.Until(p.flushBackoffQCompleted, <span class="number">1.0</span>*time.Second, p.stop)</span><br><span class="line">    <span class="keyword">go</span> wait.Until(p.flushUnschedulableQLeftover, <span class="number">30</span>*time.Second, p.stop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调度队列的运行逻辑：</p><ol><li>每隔 1s 检查 <code>podBackoffQ</code> 是否有 pod 可以放入 <code>activeQ</code> 中。检查的逻辑是判断 <code>backOffTime</code> 是否已经到期。</li><li>每隔 30s 检查 <code>unschedulableQ</code> 是否有 pod 可以放入 <code>activeQ</code> 中。</li></ol><h3 id="单个-Pod-的调度-scheduleOne"><a href="#单个-Pod-的调度-scheduleOne" class="headerlink" title="单个 Pod 的调度 scheduleOne"></a>单个 Pod 的调度 scheduleOne</h3><p>在介绍 <code>scheduleOne</code> 之前，看这张 pod 调度流程图能有助于我们理清整个过程。同时这也是 k8s v1.15 开始支持的 Scheduling Framework 的 Plugin 扩展点。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gr8t0a632ij31di0l8abm.jpg" alt="pod scheduling context"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scheduleOne does the entire scheduling workflow for a single pod.  It is serialized on the scheduling algorithm's host fitting.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sched *Scheduler)</span> <span class="title">scheduleOne</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    podInfo := sched.NextPod()</span><br><span class="line">    ...</span><br><span class="line">    pod := podInfo.Pod</span><br><span class="line">    prof, err := sched.profileForPod(pod)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Synchronously attempt to find a fit for the pod.</span></span><br><span class="line">    start := time.Now()</span><br><span class="line">    state := framework.NewCycleState()</span><br><span class="line">    ...</span><br><span class="line">    scheduleResult, err := sched.Algorithm.Schedule(schedulingCycleCtx, prof, state, pod)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell the cache to assume that a pod now is running on a given node, even though it hasn't been bound yet.</span></span><br><span class="line">    <span class="comment">// This allows us to keep scheduling without waiting on binding to occur.</span></span><br><span class="line">    assumedPodInfo := podInfo.DeepCopy()</span><br><span class="line">    assumedPod := assumedPodInfo.Pod</span><br><span class="line">    <span class="comment">// assume modifies `assumedPod` by setting NodeName=scheduleResult.SuggestedHost</span></span><br><span class="line">    err = sched.assume(assumedPod, scheduleResult.SuggestedHost)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Run the Reserve method of reserve plugins.</span></span><br><span class="line">    <span class="keyword">if</span> sts := prof.RunReservePluginsReserve(schedulingCycleCtx, state, assumedPod, scheduleResult.SuggestedHost); !sts.IsSuccess() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Run "permit" plugins.</span></span><br><span class="line">    runPermitStatus := prof.RunPermitPlugins(schedulingCycleCtx, state, assumedPod, scheduleResult.SuggestedHost)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bind the pod to its host asynchronously (we can do this b/c of the assumption step above).</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        bindingCycleCtx, cancel := context.WithCancel(ctx)</span><br><span class="line">        waitOnPermitStatus := prof.WaitOnPermit(bindingCycleCtx, assumedPod)</span><br><span class="line">        <span class="keyword">if</span> !waitOnPermitStatus.IsSuccess() &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Run "prebind" plugins.</span></span><br><span class="line">        preBindStatus := prof.RunPreBindPlugins(bindingCycleCtx, state, assumedPod, scheduleResult.SuggestedHost)</span><br><span class="line">        <span class="keyword">if</span> !preBindStatus.IsSuccess() &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        err := sched.bind(bindingCycleCtx, prof, assumedPod, scheduleResult.SuggestedHost, state)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Run "postbind" plugins.</span></span><br><span class="line">            prof.RunPostBindPlugins(bindingCycleCtx, state, assumedPod, scheduleResult.SuggestedHost)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ScheduleOne</code> 是调度器的主流程，主要包括以下几步：</p><ol><li>调用 <code>sched.NextPod()</code> 拿到下一个需要调度的 pod。后面会对这个过程进行更详细的介绍。</li><li>调用 <code>sched.profileForPod(pod)</code> ，根据 pod 中的 schedulerName 拿到针对该 pod 调度的 Profiles。这些 Profiles 就包括了调度插件的配置等。</li><li>进行上图中的 Scheduling Cycle 部分，这部分是单线程运行的。<ul><li>调用 <code>sched.Algorithm.Schedule()</code>。此处包括好几个步骤，其中 <code>PreFilter</code>, <code>Filter</code> 被称为 <strong>Predicate</strong>，是对节点进行过滤，这里面考虑了节点资源，Pod Affinity，以及 Node Volumn 等情况。而 <code>PreScore</code> , <code>Score</code> , <code>Nomalize Score</code> 又被称为 <strong>Priorities</strong>，是对节点进行优选打分，这里会得到一个适合当前 Pod 分配上去的 Node。</li><li>进行 <code>Reserve</code> 操作，将调度结果缓存。当后面的调度流程执行失败，会进行 <code>Unreserve</code> 进行数据回滚。</li><li>进行 <code>Permit</code> 操作，这里是用户自定义的插件，可以使 Pod 进行 allow（允许 Pod 通过 Permit 阶段）、reject（Pod 调度失败）和 wait（可设置超时时间）这三种操作。对于 Gang Scheduling （一批 pod 同时创建成功或同时创建失败），可以在 <code>Permit</code> 对 Pod 进行控制。</li></ul></li><li>进行图中的 Binding Cycle 部分，这部分是起了一个 Goroutine 去完成工作的，不会阻塞调度主流程。<ul><li>最开始会进行 <code>WaitOnPermit</code> 操作，这里会阻塞判断 Pod 是否 Permit，直到 Pod Permit 状态为 allow 或者 reject 再往下继续运行。</li><li>进行 <code>PreBind</code> , <code>Bind</code> , <code>PostBind</code> 操作。这里会调用 k8s apiserver 提供的接口 <code>b.handle.ClientSet().CoreV1().Pods(binding.Namespace).Bind(ctx, binding, metav1.CreateOptions{})</code>，将待调度的 Pod 与选中的节点进行绑定，但是可能会绑定失败，此时会做 <code>Unreserve</code> 操作，将节点上面 Pod 的资源解除预留，然后重新放置到失败队列中。</li></ul></li></ol><p>当 Pod 与 Node 绑定成功后，Node 上面的 kubelet 会 watch 到对应的 event，然后会在节点上创建 Pod，包括创建容器 storage、network 等。等所有的资源都准备完成，kubelet 会把 Pod 状态更新为Running。</p><h2 id="SchedulingQueue-细节"><a href="#SchedulingQueue-细节" class="headerlink" title="SchedulingQueue 细节"></a>SchedulingQueue 细节</h2><h3 id="获取下一个运行的-Pod"><a href="#获取下一个运行的-Pod" class="headerlink" title="获取下一个运行的 Pod"></a>获取下一个运行的 Pod</h3><p>调度的时候，需要获取一个调度的 pod，即 <code>sched.NextPod()</code> ，其中调用了 SchedulingQueue 的 <code>Pop()</code> 方法。</p><p>当 <code>activeQ</code> 中没有元素，会通过 <code>p.cond.Wait()</code> 阻塞，直到 <code>podBackoffQ</code> 或者 <code>unschedulableQ</code> 将元素加入 <code>activeQ</code> 并通过 <code>cond.Broadcast()</code> 来唤醒。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pop removes the head of the active queue and returns it. It blocks if the</span></span><br><span class="line"><span class="comment">// activeQ is empty and waits until a new item is added to the queue. It</span></span><br><span class="line"><span class="comment">// increments scheduling cycle when a pod is popped.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="params">(*framework.QueuedPodInfo, error)</span></span> &#123;</span><br><span class="line">    p.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> p.lock.Unlock()</span><br><span class="line">    <span class="keyword">for</span> p.activeQ.Len() == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// When the queue is empty, invocation of Pop() is blocked until new item is enqueued.</span></span><br><span class="line">        <span class="comment">// When Close() is called, the p.closed is set and the condition is broadcast,</span></span><br><span class="line">        <span class="comment">// which causes this loop to continue and return from the Pop().</span></span><br><span class="line">        <span class="keyword">if</span> p.closed &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(queueClosed)</span><br><span class="line">        &#125;</span><br><span class="line">        p.cond.Wait()</span><br><span class="line">    &#125;</span><br><span class="line">    obj, err := p.activeQ.Pop()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    pInfo := obj.(*framework.QueuedPodInfo)</span><br><span class="line">    pInfo.Attempts++</span><br><span class="line">    p.schedulingCycle++</span><br><span class="line">    <span class="keyword">return</span> pInfo, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将-Pod-加入-activeQ"><a href="#将-Pod-加入-activeQ" class="headerlink" title="将 Pod 加入 activeQ"></a>将 Pod 加入 activeQ</h3><p>当 pod 加入 <code>activeQ</code> 后，还会从 <code>unschedulableQ</code> 以及 <code>podBackoffQ</code> 中删除对应 pod 的信息，并使用 <code>cond.Broadcast()</code>  来唤醒阻塞的 Pop。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add adds a pod to the active queue. It should be called only when a new pod</span></span><br><span class="line"><span class="comment">// is added so there is no chance the pod is already in active/unschedulable/backoff queues</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span> <span class="title">Add</span><span class="params">(pod *v1.Pod)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    p.lock.Lock()</span><br><span class="line">    <span class="keyword">defer</span> p.lock.Unlock()</span><br><span class="line">    pInfo := p.newQueuedPodInfo(pod)</span><br><span class="line">    <span class="keyword">if</span> err := p.activeQ.Add(pInfo); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        klog.Errorf(<span class="string">"Error adding pod %v to the scheduling queue: %v"</span>, nsNameForPod(pod), err)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> p.unschedulableQ.get(pod) != <span class="literal">nil</span> &#123;</span><br><span class="line">        klog.Errorf(<span class="string">"Error: pod %v is already in the unschedulable queue."</span>, nsNameForPod(pod))</span><br><span class="line">        p.unschedulableQ.<span class="built_in">delete</span>(pod)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Delete pod from backoffQ if it is backing off</span></span><br><span class="line">    <span class="keyword">if</span> err := p.podBackoffQ.Delete(pInfo); err == <span class="literal">nil</span> &#123;</span><br><span class="line">        klog.Errorf(<span class="string">"Error: pod %v is already in the podBackoff queue."</span>, nsNameForPod(pod))</span><br><span class="line">    &#125;</span><br><span class="line">    metrics.SchedulerQueueIncomingPods.WithLabelValues(<span class="string">"active"</span>, PodAdd).Inc()</span><br><span class="line">    p.PodNominator.AddNominatedPod(pod, <span class="string">""</span>)</span><br><span class="line">    p.cond.Broadcast()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当-Pod-调度失败时进入失败队列"><a href="#当-Pod-调度失败时进入失败队列" class="headerlink" title="当 Pod 调度失败时进入失败队列"></a>当 Pod 调度失败时进入失败队列</h3><p>当 pod 调度失败时，会调用 <code>sched.Error()</code> ，其中调用了 <code>p.AddUnschedulableIfNotPresent()</code> .</p><p>决定 pod 调度失败时进入 <code>podBackoffQ</code> 还是 <code>unschedulableQ</code> ：如果 <code>moveRequestCycle</code> 大于 <code>podSchedulingCycle</code> ，则进入 <code>podBackoffQ</code> ，否则进入 <code>unschedulableQ</code> .</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AddUnschedulableIfNotPresent inserts a pod that cannot be scheduled into</span></span><br><span class="line"><span class="comment">// the queue, unless it is already in the queue. Normally, PriorityQueue puts</span></span><br><span class="line"><span class="comment">// unschedulable pods in `unschedulableQ`. But if there has been a recent move</span></span><br><span class="line"><span class="comment">// request, then the pod is put in `podBackoffQ`.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span> <span class="title">AddUnschedulableIfNotPresent</span><span class="params">(pInfo *framework.QueuedPodInfo, podSchedulingCycle <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// If a move request has been received, move it to the BackoffQ, otherwise move</span></span><br><span class="line">    <span class="comment">// it to unschedulableQ.</span></span><br><span class="line">    <span class="keyword">if</span> p.moveRequestCycle &gt;= podSchedulingCycle &#123;</span><br><span class="line">        <span class="keyword">if</span> err := p.podBackoffQ.Add(pInfo); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">"error adding pod %v to the backoff queue: %v"</span>, pod.Name, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p.unschedulableQ.addOrUpdate(pInfo)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>何时 <code>moveRequestCycle &gt;= podSchedulingCycle</code> ：</p><ol><li>我们在集群资源变更的时候（例如添加 Node 或者删除 Pod），会有回调函数尝试将 <code>unschedulableQ</code> 中之前因为资源不满足需求的 pod 放入 <code>activeQ</code> 或者 <code>podBackoffQ</code> ，及时进行调度。</li><li>调度队列会每隔 30s 定时运行 <code>flushUnschedulableQLeftover</code> ，尝试调度 <code>unschedulableQ</code> 中的 pod。</li></ol><p>这两者都会调用 <code>movePodsToActiveOrBackoffQueue</code> 函数，并将 <code>moveRequestCycle</code> 设为 <code>p.schedulingCycle</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span> <span class="title">movePodsToActiveOrBackoffQueue</span><span class="params">(podInfoList []*framework.QueuedPodInfo, event <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    p.moveRequestCycle = p.schedulingCycle</span><br><span class="line">    p.cond.Broadcast()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="podBackoffQ-中-pod-的生命周期"><a href="#podBackoffQ-中-pod-的生命周期" class="headerlink" title="podBackoffQ 中 pod 的生命周期"></a>podBackoffQ 中 pod 的生命周期</h3><p><strong>加入 podBackoffQ</strong></p><p>有两种情况会让 pod 加入 podBackoffQ：</p><ol><li>调度失败。如果调度失败，并且集群资源发生变更，即 <code>moveRequestCycle &gt;= podSchedulingCycle</code> ，pod 就会加入到 podBackoffQ 中。</li><li>从 unschedulableQ 中转移。当集群资源发生变化的时候，最终会调用 <code>movePodsToActiveOrBackoffQueue</code> 将 unschedulableQ 的 pod 转移到 podBackoffQ 或者 activeQ 中。转移到 podBackoffQ 的条件是 <code>p.isPodBackingoff(pInfo)</code> ，即 pod 仍然处于 backoff 状态。</li></ol><p><strong>退出 podBackoffQ</strong></p><p>调度器会定时让 pod 从 podBackoffQ 转移到 activeQ 中。</p><p>在 <code>sched.SchedulingQueue.Run</code> 中运行的 <code>flushBackoffQCompleted</code> cronjob 会每隔 1s 按照优先级（优先级是按照 backoffTime 排序）依次将满足 backoffTime 条件的 pod 从 podBackoffQ 转移到 activeQ 中，直到遇到一个不满足 backoffTime 条件的 pod。</p><h3 id="unschedulableQ-中-pod-的生命周期"><a href="#unschedulableQ-中-pod-的生命周期" class="headerlink" title="unschedulableQ 中 pod 的生命周期"></a>unschedulableQ 中 pod 的生命周期</h3><p><strong>加入 unschedulableQ</strong></p><p>只有一种情况会让 pod 加入 unschedulableQ，那就是调度失败。如果调度失败，并且集群资源没有发生变更，即 <code>moveRequestCycle &lt; podSchedulingCycle</code> ，那么 pod 就会加入到 unschedulableQ 中。</p><p><strong>退出 unschedulableQ</strong></p><p>调度器会同样定时让 pod 从 unschedulableQ 转移到 podBackoffQ 或者 activeQ 中。</p><p>在 <code>sched.SchedulingQueue.Run</code> 中运行的 <code>flushUnschedulableQLeftover</code> 最终会调用 <code>movePodsToActiveOrBackoffQueue</code> 将 pod 分别加入到 podBackoffQ 或者 activeQ 中。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Kubernetes scheduler 是 kubernetes 中相当重要的组件，基本上各个云平台都会根据自己的业务模型和需求自定义调度器，例如 <a href="https://github.com/volcano-sh/volcano" target="_blank" rel="noopener">华为的 Volcano</a> 计算框架。</p><p>通过这方面的学习，能在自定义调度器的开发中更加得心应手。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener">k8s source code</a></p><p><a href="https://zhuanlan.zhihu.com/p/102469822" target="_blank" rel="noopener">图解kubernetes调度器SchedulingQueue核心源码实现</a></p><p><a href="https://www.cnblogs.com/yangyuliufeng/p/14257917.html" target="_blank" rel="noopener">深入理解k8s调度器与调度框架核心源码</a></p><p><a href="https://qiankunli.github.io/2019/03/03/kubernetes_scheduler.html" target="_blank" rel="noopener">Kubernetes资源调度——scheduler</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MIT6.824 2020 Lab1 MapReduce 实现</title>
      <link href="/2021/03/12/MIT6-824-2020-Lab1-MapReduce-%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/03/12/MIT6-824-2020-Lab1-MapReduce-%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>实验地址：<a href="http://nil.csail.mit.edu/6.824/2020/labs/lab-mr.html" target="_blank" rel="noopener">http://nil.csail.mit.edu/6.824/2020/labs/lab-mr.html</a></p><p>论文地址：<a href="http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">mapreduce</a></p><p>实验环境可以在实验地址里面找到具体的搭建方式。</p><h1 id="系统总览"><a href="#系统总览" class="headerlink" title="系统总览"></a>系统总览</h1><p>MapReduce 系统是由一个 master 进程和多个 worker 进程组成。</p><p>Master 负责任务状态的记录以及任务的分发。</p><p>Worker 负责不断向 master 请求任务，并根据任务的类型（map/reduce）进行处理，最后将任务结果发送给 master。</p><p>系统框架图如下：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1goe2y41qoej30f10c9mx5.jpg" alt="process"></p><p>系统流程图如下：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1goeibpyt8lj30nd0j7mxn.jpg" alt=""></p><h1 id="程序基本逻辑"><a href="#程序基本逻辑" class="headerlink" title="程序基本逻辑"></a>程序基本逻辑</h1><h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><ul><li>master 一开始只能分发 map 任务。</li><li>当所有 map 任务执行完毕后，master 才开始分发 reduce 任务。</li><li>当所有 map 和 reduce 任务执行完毕，master 退出。</li><li>对于分发出去的任务，需要进行超时控制，即超时的任务需要重新分发处理。在完成分发任务的同时，对该任务运行一条检测任务超时的 go routine <code>checkTaskTimeout</code> 。</li></ul><h2 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h2><p>Worker 调用  <code>GetTask</code> RPC 接口不断向 master 请求任务。当接收到任务，根据任务的类型分类处理。处理完后，调用 <code>CompleteTask</code> 接口告知 master 任务执行完毕。</p><ul><li>如果是 map 任务，输入是单个文件，通过 <code>mapf</code> 处理后，使用 <code>ihash(key) % nReduce</code> 决定写入到哪个中间文件，输出是 nReduce 个中间文件。</li><li>如果是 reduce 任务，输入是多个 map 输出的中间文件，通过 <code>reducef</code> 处理后，输出是单个文件。</li><li>如果没有可执行的任务，则等待一下，继续轮询。</li></ul><h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><p>Master 的结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// master.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Pending, Running and Completed</span></span><br><span class="line">phase    <span class="keyword">string</span></span><br><span class="line">taskID   <span class="keyword">int</span></span><br><span class="line">taskType <span class="keyword">string</span></span><br><span class="line"><span class="comment">// for map, input path has only one element</span></span><br><span class="line">inputPaths []<span class="keyword">string</span></span><br><span class="line"><span class="comment">// for reduce, output path has only one element</span></span><br><span class="line">outputPaths []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Master <span class="keyword">struct</span> &#123;</span><br><span class="line">nReduce                    <span class="keyword">int</span></span><br><span class="line">mapTasks                   []*Task</span><br><span class="line">reduceTasks                []*Task</span><br><span class="line">incompletedMapTaskCount    <span class="keyword">int</span></span><br><span class="line">incompletedReduceTaskCount <span class="keyword">int</span></span><br><span class="line">reduceInitialized          <span class="keyword">bool</span></span><br><span class="line">mux                        sync.Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Worker 主要是处理逻辑，官方实验文档以及 <code>main/mrsequential.go</code> 里面有例子。</p><p>RPC 的结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rpc.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GetTaskRequest <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GetTaskResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">TaskType   <span class="keyword">string</span></span><br><span class="line">TaskID     <span class="keyword">int</span></span><br><span class="line">TaskInputs []<span class="keyword">string</span></span><br><span class="line">NReduce    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CompleteTaskRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TaskType    <span class="keyword">string</span></span><br><span class="line">TaskID      <span class="keyword">int</span></span><br><span class="line">TaskOutputs []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CompleteTaskResponse <span class="keyword">struct</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>以上是代码的结构，具体的代码细节在 <a href="https://github.com/shadowdsp/mit6.824" target="_blank" rel="noopener">github</a> 上面。</p><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><p>这里最主要的应该是对于并发的控制，以及 crash 的处理。</p><p>并发控制加锁可以完成。</p><p>crash 的处理是靠 master 的超时机制，以及在 worker 处理的时候，生成一个临时文件，在处理结束后再 rename 成最终的文件。</p><p>为了方便 debug，推荐使用 <code>github.com/sirupsen/logrus</code> 这个库。可以将 debug 等级设为 debug level 来输出自己的 debug 信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    log <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">log.SetOutput(os.Stdout)</span><br><span class="line"><span class="comment">// log.SetLevel(log.DebugLevel)</span></span><br><span class="line">log.SetLevel(log.WarnLevel)</span><br><span class="line">log.SetFormatter(&amp;log.TextFormatter&#123;</span><br><span class="line">    FullTimestamp: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h1><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1goeqgknphxj312w0powh7.jpg" style="zoom: 50%;"></p><p>这里的 <code>FATAL</code> 是 master 检测到所有任务完成后退出，worker 连接不上 master 而抛出的错误，是预期的。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这个实验虽然只是一个小玩具，但还是有收获的。特别是看过论文后进行实验，对 mapreduce 一些细节的实现有更深的了解。有兴趣的同学可以自己完成一遍。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python中的协程</title>
      <link href="/2020/04/05/Python%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/"/>
      <url>/2020/04/05/Python%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h1><p>协程是指一个过程，这个过程与调用方协作，产出由调用方提供的值。</p><p>协程是程序可以控制的，可以在内部中断。</p><h1 id="生成器与协程"><a href="#生成器与协程" class="headerlink" title="生成器与协程"></a>生成器与协程</h1><p>从句法上看，协程与生成器类似，都是定义体中包含 <code>yield</code> 关键字的函数。但是在协程中， <code>yield</code> 通常会出现在表达式的右边，例如 <code>value = yeild</code> ，可以选择是否产出值，如果 <code>yield</code> 后面没有表达式，那么生成器产出 <code>None</code>。</p><p>协程通常包含着协程本身与调用方的数据交互，因此协程可能会从调用方接收数据，不过调用方把数据提供给协程的方式是通过 <code>coroutine.send(value)</code> 方法，而不是 <code>next(coroutinue)</code> 函数。除了 <code>.send(value)</code> 方法之外，还有 <code>.throw(Exception)</code> 和 <code>.close()</code> 方法：前者的作用是让调用方抛出异常，在生成器中处理；后者的作用是终止生成器。</p><h1 id="Python-中协程的使用方式"><a href="#Python-中协程的使用方式" class="headerlink" title="Python 中协程的使用方式"></a>Python 中协程的使用方式</h1><p><strong>本文使用的 Python 环境是 Python3.7.1</strong> 。</p><p>有了上面的知识，可以写出我们的第一个使用协程的简单例子。</p><blockquote><p>Example 1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_coroutine</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>  print(<span class="string">'start'</span>)</span><br><span class="line"><span class="meta">... </span>  value = <span class="keyword">yield</span> <span class="comment"># 这里 value 会接收协程调用方使用 `.send()` 发送的值</span></span><br><span class="line"><span class="meta">... </span>  print(<span class="string">f'received <span class="subst">&#123;value&#125;</span>'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro = my_coroutine()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro</span><br><span class="line">&lt;generator object my_coroutine at <span class="number">0x10165bc78</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(my_coro) <span class="comment"># 预激协程</span></span><br><span class="line">start</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro.send(<span class="string">"233"</span>) <span class="comment"># 将值传给协程</span></span><br><span class="line">received <span class="number">233</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><h2 id="协程的状态"><a href="#协程的状态" class="headerlink" title="协程的状态"></a>协程的状态</h2><p>协程具有四个状态，分别是：</p><ol><li><code>GEN_CREATED</code> 等待开始执行。</li><li><code>GEN_RUNNING</code> 解释器正在执行。</li><li><code>GEN_SUSPENDED</code>  在 <code>yield</code> 表达式处暂停。</li><li><code>GEN_CLOSED</code>  执行结束。</li></ol><p>要获取协程的状态可以通过 <code>inspect.getgeneratorstate(coroutine)</code> 方法获取。</p><p>一开始的时候，协程还处于未激活状态 <code>GEN_CREATED</code>，这时需要使用 <code>next(coroutine)</code> 或者 <code>coroutine.send(None)</code> 方法激活协程。这一步通常叫做 <strong>预激(prime)</strong> 协程（即让协程向前执行到第一个 <code>yield</code> 表达式，准备好作为活跃的协程使用）。</p><p>Tips：如果没有预激协程，那么会抛出一个异常，如下：</p><blockquote><p>Example 2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_coroutine</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'start'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">import</span> time</span><br><span class="line"><span class="meta">... </span>    time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="meta">... </span>    x = <span class="keyword">yield</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">f'end -&gt; <span class="subst">&#123;x&#125;</span>'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro = my_coroutine()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> inspect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.getgeneratorstate(coro))</span><br><span class="line">GEN_CREATED</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="string">"233"</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: can<span class="string">'t send non-None value to a just-started generator</span></span><br></pre></td></tr></table></figure><p>由于 <code>.send()</code> 方法的参数会成为暂停的 <code>yield</code> 表达式的值，所以仅当协程处于暂停状态时才可以调用 <code>sned</code> 方法，换句话说，调用方在使用 <code>.send()</code> 方法的时候可能会阻塞主程序的运行。例如我们尝试在协程中加上 <code>sleep()</code> 。</p><blockquote><p>Example 3</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_coroutine</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'start'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">import</span> time</span><br><span class="line"><span class="meta">... </span>    time.sleep(<span class="number">5</span>)  <span class="comment"># 这里会阻塞主程序 5s</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'sleep 5 ok'</span>)</span><br><span class="line"><span class="meta">... </span>    x = <span class="keyword">yield</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">f'end -&gt; <span class="subst">&#123;x&#125;</span>'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro = my_coroutine()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(coro)</span><br><span class="line">&lt;generator object my_coroutine at <span class="number">0x10a0482a0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.getgeneratorstate(coro))</span><br><span class="line">GEN_CREATED</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(coro)</span><br><span class="line">start</span><br><span class="line">sleep <span class="number">5</span> ok <span class="comment"># 5s 后输出</span></span><br></pre></td></tr></table></figure><blockquote><p>Eample 4 产出多个值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_coroutine2</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">f'start: a = <span class="subst">&#123;a&#125;</span>'</span>)</span><br><span class="line"><span class="meta">... </span>    b = <span class="keyword">yield</span> a</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">f'b = <span class="subst">&#123;b&#125;</span>'</span>)</span><br><span class="line"><span class="meta">... </span>    c = <span class="keyword">yield</span> a + b</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">f'c = <span class="subst">&#123;c&#125;</span>'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro = my_coroutine2(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.getgeneratorstate(coro))</span><br><span class="line">GEN_CREATED</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(coro)</span><br><span class="line">start: a = <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.getgeneratorstate(coro))</span><br><span class="line">GEN_SUSPENDED</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="number">3</span>)  <span class="comment"># 把数值 3 发给协程，b 被赋值为 3，计算 `a + b`，得到 4, 产出 `a + b` 的值</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="number">5</span>)</span><br><span class="line">c = <span class="number">5</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.getgeneratorstate(coro))</span><br><span class="line">GEN_CLOSED</span><br></pre></td></tr></table></figure><p><code>my_coroutine2()</code> 的执行分为三个阶段：</p><ol><li>调用 <code>next(coro)</code>，打印第一个消息，然后执行 <code>yield a</code>，产出 1.</li><li>调用 <code>coro.send(3)</code>，把值 3 赋予 b，打印第二个消息，然后执行 <code>yield a + b</code>, 产出 4.</li><li>调用 <code>coro.send(5)</code>，把值 5 赋予 c，打印第三个消息，协程终止。</li></ol><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdhj11lhnbj30h1067dgm.jpg" alt="执行流程"></p><h2 id="协程的终止与异常处理"><a href="#协程的终止与异常处理" class="headerlink" title="协程的终止与异常处理"></a>协程的终止与异常处理</h2><p>协程的终止可以调用 <code>coroutine.close()</code> 方法。<code>close()</code> 是会让生成器在暂停的 <code>yield</code> 表达式处抛出 <code>GeneratorExit</code> 异常。如果生成器没有处理这个异常，或者抛出了 <code>StopIteration</code> 异常（通常指运行到结尾），调用方不会报错。</p><p>要在协程中抛出异常可以调用 <code>coroutine.throw(...)</code> 方法。<code>throw()</code> 会使生成器在暂停的 <code>yield</code> 表达式处抛出指定异常。如果生成器处理了抛出的异常，代码会向前执行到下一个 <code>yield</code> 表达式，而产出的值会成为调用 <code>throw()</code> 方法得到的返回值。</p><blockquote><p>Example 5</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">CustomException</span><span class="params">(Exception)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_coroutine3</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'my coroutine3 start...'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            value = <span class="keyword">yield</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">except</span> CustomException:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'Catch custom exception...'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">f'coroutine3 received value: <span class="subst">&#123;value&#125;</span>'</span>)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'coroutine3 terminated by unknown exception...'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro = my_coroutine3()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(coro)</span><br><span class="line">my coroutine3 start...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="number">5</span>)</span><br><span class="line">coroutine3 received value: <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="number">20</span>)</span><br><span class="line">coroutine3 received value: <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.getgeneratorstate(coro))</span><br><span class="line">GEN_SUSPENDED</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.throw(CustomException())</span><br><span class="line">Catch custom exception...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.getgeneratorstate(coro))</span><br><span class="line">GEN_SUSPENDED</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.getgeneratorstate(coro))</span><br><span class="line">GEN_CLOSED</span><br></pre></td></tr></table></figure><h2 id="获取协程的返回值"><a href="#获取协程的返回值" class="headerlink" title="获取协程的返回值"></a>获取协程的返回值</h2><p>Example 6 尝试在协程的最后添加 <code>return</code> 语句返回结果。</p><blockquote><p>Example 6</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Result = namedtuple(<span class="string">'Result'</span>, <span class="string">'count average'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    total = <span class="number">0.0</span></span><br><span class="line"><span class="meta">... </span>    count = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    average = <span class="keyword">None</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        value = <span class="keyword">yield</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>        total += value</span><br><span class="line"><span class="meta">... </span>        count += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        average = total / count</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> Result(count, average)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro = averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(coro)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="keyword">None</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration: Result(count=<span class="number">2</span>, average=<span class="number">12.5</span>)</span><br></pre></td></tr></table></figure><p>可以看到协程 <code>return</code> 的值保存在了 <code>StopIteration</code> 的 <code>value</code> 属性中。</p><p>于是我们可以修改 Example 6 得到 Example 7, 通过捕获异常去获取返回值：</p><blockquote><p>Example 7</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro = averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(coro)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro.send(<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    coro.send(<span class="keyword">None</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    result = e.value</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line">Result(count=<span class="number">2</span>, average=<span class="number">12.5</span>)</span><br></pre></td></tr></table></figure><p>这样的程序的缺点很明显，即我们需要添加更多的异常处理。 <code>yield from</code> 可以解决这个问题。</p><h3 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h3><p><code>yield from</code> 会在内部自动捕获 <code>StopIteration</code> 异常，并把异常的 <code>value</code> 属性的值变成 <code>yield from</code> 表达式的值。</p><p>举个例子：现在我们有一个动态获取求一组数据的平均结果的需求。</p><p>不使用 <code>yield from</code> 的写法如 Example 8 所示。</p><blockquote><p>Example 8 不使用 <code>yield from</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span></span><br><span class="line">    total = <span class="number">0.0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    average = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        value = <span class="keyword">yield</span> average</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        total += value</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        average = total / count</span><br><span class="line">    <span class="keyword">return</span> Result(count, average)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"A"</span>: [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>, <span class="number">7</span>)],</span><br><span class="line">        <span class="string">"B"</span>: [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)],</span><br><span class="line">    &#125;</span><br><span class="line">    results = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key, values <span class="keyword">in</span> data.items():</span><br><span class="line">        avg = averager()</span><br><span class="line">        next(avg)  <span class="comment"># 预激 group 协程</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">            avg.send(value)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            avg.send(<span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:  <span class="comment"># catch exception</span></span><br><span class="line">            results[key] = e.value</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">▶ python3 test.py</span><br><span class="line">&#123;<span class="string">'A'</span>: Result(count=<span class="number">3</span>, average=<span class="number">5.0</span>), <span class="string">'B'</span>: Result(count=<span class="number">3</span>, average=<span class="number">1.0</span>)&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>yield from</code> 的代码如 Example 9 所示：</p><blockquote><p>Example 9 使用 <code>yield from</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Result = namedtuple(<span class="string">'Result'</span>, <span class="string">'count average'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span></span><br><span class="line">    total = <span class="number">0.0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    average = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        value = <span class="keyword">yield</span>  <span class="comment"># value 的值是调用方 main() 中 send 过来的</span></span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        total += value</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        average = total / count</span><br><span class="line">    <span class="keyword">return</span> Result(count, average)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grouper</span><span class="params">(results, key)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:  <span class="comment"># Tag</span></span><br><span class="line">        results[key] = <span class="keyword">yield</span> <span class="keyword">from</span> averager()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"A"</span>: [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)],</span><br><span class="line">        <span class="string">"B"</span>: [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)],</span><br><span class="line">    &#125;</span><br><span class="line">    results = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key, values <span class="keyword">in</span> data.items():</span><br><span class="line">        group = grouper(results, key)</span><br><span class="line">        next(group)  <span class="comment"># 预激 group 协程</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">            group.send(value)</span><br><span class="line">        group.send(<span class="keyword">None</span>)  <span class="comment"># 终止 averager，处理下一个 key 的 values</span></span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">▶ python3 test.py</span><br><span class="line">&#123;<span class="string">'A'</span>: Result(count=<span class="number">3</span>, average=<span class="number">5.0</span>), <span class="string">'B'</span>: Result(count=<span class="number">3</span>, average=<span class="number">1.0</span>)&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>yield from</code> 会涉及到下面的术语：</p><ol><li>委派生成器：包含 <code>yield from &lt;iterable&gt;</code> 表达式的生成器函数。即 <code>grouper()</code>。</li><li>子生成器：从 <code>yield from</code> 表达式中 <code>&lt;iterable&gt;</code> 部分获取的生成器。即 <code>averager()</code>。</li><li>调用方：调用委派生成器的客户端代码。即 <code>main()</code>。</li></ol><p><code>yield from</code> 的主要功能是打开双向通道，把最外层的调用方与最内层的子生成器链接起来，这样二者可以直接发送和产出值，还可以直接传入异常，而不用在位于中间的协程添加大量处理异常的样板代码。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdhunpe7n1j30h605n0tc.jpg" alt="Example 9 示意图"></p><p><strong>Qustion</strong>: 为什么在 <code>grouper()</code> 里面需要加 <code>while True</code> 呢？</p><p><strong>Answer</strong>：由于我们在最后 <code>send(None)</code> 的时候，<code>averager()</code> 直接 <code>break</code> 了，这时候没有再执行到 <code>value = yield</code> 的 <code>yield</code> 处，因此调用方 <code>group.send(None)</code> 拿不到子生成器中 <code>yield</code> 的值，会抛出 <code>StopIteration</code> 异常。我们需要让调用方 <code>group.send(None)</code> 能够拿到 <code>yield</code> 的结果，因此需要再进入子生成器 <code>yield</code> 产出结果给调用方 <code>group.send(None)</code>。</p><p>当然 <code>yield from</code> 不只处理了 <code>StopIteration</code> 异常，它还会做一些其他操作，这里是 <a href="https://www.python.org/dev/peps/pep-0380/" target="_blank" rel="noopener">PEP 380</a> 说明的 <code>yield from</code> 的行为：</p><ol><li>子生成器产生的值都返回给委派生成器的调用方。</li><li>任何使用 <code>send()</code> 方法发送给委派生成器的值都直接传给子生成器。如果发送的值是 <code>None</code> ，那么会调用子生成器的 <code>__next__()</code> 方法。如果发送的值不是 <code>None</code>，那么会调用子生成器的 <code>send()</code> 方法。如果调用的方法抛出 <code>StopIteration</code> 异常，那么委派生成器恢复执行，其他任何异常都会向上传递给委派生成器。</li><li>除了 <code>GeneratorExit</code> 异常以外的其他传入委派生成器的异常，都会传给子生成器的 <code>throw()</code> 方法。如果调用 <code>throw()</code> 方法时抛出 <code>StopIteration</code> 异常，委派生成器恢复运行。 <code>StopIteration</code> 以外的异常都会向上传递给委派生成器。</li><li>如果 <code>GeneratorExit</code> 异常被抛给委派生成器，或者委派生成器的 <code>close()</code> 方法被调用，如果子生成器有 <code>close()</code> 的话也将被调用。如果 <code>close()</code> 调用产生异常，异常将传递给委派生成器。否则，委派生成器将抛出 <code>GeneratorExit</code> 异常。</li><li><code>yield from</code> 表达式的值是子生成器终止时传给 <code>StopIteration</code> 异常的第一个参数。</li><li>生成器退出时，生成器（或子生成器）中的 <code>return expr</code> 表达式会触发 <code>StopIteration(expr)</code> 异常抛出。</li></ol><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://evanli.github.io/programming-book-3/Python/Fluent%20Python.pdf" target="_blank" rel="noopener">Fluent Python</a> 本文几乎都是基于这本书的内容做的笔记。</p><p><a href="https://www.python.org/dev/peps/pep-0380/" target="_blank" rel="noopener">Python Developer’s Guide PEP 380</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python中的文本和字节</title>
      <link href="/2019/09/15/Python%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E8%8A%82/"/>
      <url>/2019/09/15/Python%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>最近工作中的项目同时使用到了 Python2 和 Python3 ，遇到了文本和字节的 tricks，自己之前对这方面不太了解，学习并总结一下。</p><h2 id="编码介绍"><a href="#编码介绍" class="headerlink" title="编码介绍"></a>编码介绍</h2><h3 id="Unicode-标准"><a href="#Unicode-标准" class="headerlink" title="Unicode 标准"></a>Unicode 标准</h3><p>Unicode 是用于表示文本以供计算机进行处理的通用字符编码标准。Unicode 标准提供了一种对多语种纯文本进行一致编码的方法，便于国际文本文件的交换。</p><p><strong>字符</strong> 的最佳定义是 <strong>Unicode 字符</strong> 。Unicode 只是一个符号集，它只规定了符号的二进制代码，并没有规定这个二进制代码应该如何存储。</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p><strong>UTF-8 字符编码是 Unicode 的实现方式之一。</strong></p><p>UTF-8 是一种变长的编码方式，它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><h2 id="Python-中的文本和字节"><a href="#Python-中的文本和字节" class="headerlink" title="Python 中的文本和字节"></a>Python 中的文本和字节</h2><p>Python3 中从 str 对象中获取的元素就是 Unicode 字符，可以通过 <strong>编码 (encode)</strong> 将 <strong>文本</strong> 转化为 <strong>字节</strong>。 </p><p>然而 Python2 中从 str 对象中获取的元素是字节序列，只有通过 <strong>解码 (decode)</strong> 才能将 <strong>字节</strong> 转化为 <strong>文本</strong> 。</p><p>下面使用两个版本的 Python 对字符串进行操作以作解释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># py3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;  # 文本</span></span><br><span class="line">&gt;&gt;&gt; b = s.encode('utf-8')</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">b'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt; # 字节序列</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># py2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt; <span class="comment"># 这里是字节序列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = s.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt; <span class="comment"># 这里还是字节序列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.decode() <span class="comment"># decode 出来的才是文本</span></span><br><span class="line"><span class="string">u'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b.decode())</span><br><span class="line">&lt;type <span class="string">'unicode'</span>&gt; <span class="comment"># 文本</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">'一二三'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="string">'\xe4\xb8\x80\xe4\xba\x8c\xe4\xb8\x89'</span> <span class="comment"># 字节序列</span></span><br></pre></td></tr></table></figure><p>从上面的程序可以总结出 Python2 和 Python3 对于字符串处理上的区别：</p><table><thead><tr><th></th><th>Python2</th><th>Python3</th></tr></thead><tbody><tr><td>Unicode strings</td><td>unicode</td><td>str</td></tr><tr><td>Bytes strings</td><td>str</td><td>bytes</td></tr></tbody></table><h2 id="Python-中的-u-b-r"><a href="#Python-中的-u-b-r" class="headerlink" title="Python 中的 u, b, r"></a>Python 中的 <code>u</code>, <code>b</code>, <code>r</code></h2><p>Python 的字符串有时候前面会加一个 <code>u</code> ，<code>r</code> 或者 <code>b</code> ，其含义如下：</p><p><code>u</code> ：表示字符串中的元素是 <strong>Unicode</strong> 字符。结合上面表格的结论，可以认为：在 Python3 中，字符串前面是否加 <code>u</code> 的效果是一致的。在 Python2 中，字符串前面加 <code>u</code> 表示其中的元素是 Unicode 字符，不加 <code>u</code> 表示 bytes。</p><p><code>b</code> ：表示字符串中的元素是 <strong>Bytes</strong>。同结合上面表格的结论，可以认为：在 Python2 中，字符串前面是否加 <code>b</code> 的效果是一致的。在 Python3 中，字符串前面加 <code>b</code> 表示其中的元素是 bytes，不加 <code>b</code> 表示 Unicode 字符。</p><p><code>r</code> ：表示字符串是 <strong>原始字符串(raw string)</strong> ，里面的字符都是 <strong>raw string literals</strong> ，与 Unicode 和 Bytes 无关，因此 Python2 和 Python3 中含义是一致的。它的作用是使解释器不会对诸如 <code>\n</code>, <code>\t</code> 等转义字符进行转义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># py3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">'123\n123\t123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1</span><br><span class="line"><span class="string">'123\n123\t123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="string">r'123\n123\t123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2</span><br><span class="line"><span class="string">'123\\n123\\t123'</span> <span class="comment"># 不转义</span></span><br></pre></td></tr></table></figure><h2 id="Python2-和-Python3-在字符串处理方面的兼容"><a href="#Python2-和-Python3-在字符串处理方面的兼容" class="headerlink" title="Python2 和 Python3 在字符串处理方面的兼容"></a>Python2 和 Python3 在字符串处理方面的兼容</h2><p>既然 Python2 和 Python3 在字符串的处理方面有所不同，但是实际工作中却需要写出兼容两种版本的代码，那么应该如何处理呢？</p><p>我的做法是使用 <code>__future__</code> 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from __future__ import unicode_literals</span><br></pre></td></tr></table></figure><p>该模块的作用是将 Python2 的字符串字面量的类型变为文本，而不是字节，因此与 Python3 是一样的。</p><p>举个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># py2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">u'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</span><br><span class="line">&lt;type <span class="string">'unicode'</span>&gt; <span class="comment"># 文本</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">b'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt; <span class="comment"># 字节</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前 Python2 与 Python3 是并存的，因此在编写代码过程中需要注意其中的差异和兼容性，不然就要出锅了hhh（虽然 Python2 在 2020 年 1 月就要停止维护了）。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记</a></li><li><a href="https://learn.rmotr.com/python/understanding-unicode-in-python/strings-and-unicode/unicode-in-python" target="_blank" rel="noopener">Unicode In Python</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中异步获取文件集并返回结果集</title>
      <link href="/2019/01/20/js%E4%B8%AD%E5%BC%82%E6%AD%A5%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E9%9B%86%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E9%9B%86/"/>
      <url>/2019/01/20/js%E4%B8%AD%E5%BC%82%E6%AD%A5%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E9%9B%86%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近在使用js中经常遇到需要去异步获取文件并对文件内容进行处理的需求。</p><p>详细的需求是：同时去异步获取多个文件，然后将多个文件的结果聚合起来，返回。</p><p>但是关于这样的做法有不少的实现方式，在这里主要做一个总结。</p><h1 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h1><p>我先在项目中放置了两个需要获取的json文件。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fzcxkhbgfzj30bk0diglo.jpg" alt=""></p><blockquote><p>a.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"a"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"b"</span>: <span class="string">"2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>b.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"c"</span>: <span class="string">"3"</span>,</span><br><span class="line">  <span class="attr">"d"</span>: <span class="string">"4"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来开始获取这两个文件。</p><h2 id="只使用-Promise-then"><a href="#只使用-Promise-then" class="headerlink" title="只使用 Promise/then"></a>只使用 Promise/then</h2><h3 id="Promise-then介绍"><a href="#Promise-then介绍" class="headerlink" title="Promise/then介绍"></a>Promise/then介绍</h3><p><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Promise介绍</a></p><p>关于 Promise，可以看上面的链接，介绍的十分详细。</p><p>Promise有一个resolve()方法，将Promise对象的pending状态转化为resolved状态，并将操作的结果作为参数传递出去：例如 <code>new Promise((resolve, reject) =&gt; { resolve(&#39;123&#39;) })</code>，这里会将<code>&#39;123&#39;</code>作为Promise的结果传递出去。</p><p>接着可以用then方法去获取结果。then方法只能跟在Promise的后面，因此then方法的两个形参分别是Promise的resolve()方法传入的参数和reject()方法传入的参数。</p><p>一个小例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; resolve(<span class="string">'123'</span>) &#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h3 id="实现异步"><a href="#实现异步" class="headerlink" title="实现异步"></a>实现异步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = [<span class="string">'./data/a.json'</span>, <span class="string">'./data/b.json'</span>] <span class="comment">// 放在相对于index.html目录下的两个json文件</span></span><br><span class="line"><span class="keyword">let</span> promises = files.map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fetch(file).then(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(resp.json()) <span class="comment">// resp.json() is a promise，resolve(resp.json())将包含的文件结果的promise传递出去</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'A : '</span>, promises) <span class="comment">// two promises</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A :  </span></span><br><span class="line"><span class="comment">(2) [Promise, Promise]</span></span><br><span class="line"><span class="comment">    0: Promise</span></span><br><span class="line"><span class="comment">      [[PromiseStatus]]: "resolved"</span></span><br><span class="line"><span class="comment">      [[PromiseValue]]: Object</span></span><br><span class="line"><span class="comment">        a: "1"</span></span><br><span class="line"><span class="comment">        b: "2"</span></span><br><span class="line"><span class="comment">    1: Promise &#123;&lt;resolved&gt;: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">    length: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.all()将promises数组转化为一个promise，并获取promises内部的promise的返回值，并将返回值以一个数组的形式传递出去</span></span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(results) &#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(2) [&#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"><span class="comment">    0:</span></span><br><span class="line"><span class="comment">    a: "1"</span></span><br><span class="line"><span class="comment">    b: "2"</span></span><br><span class="line"><span class="comment">1:</span></span><br><span class="line"><span class="comment">    c: "3"</span></span><br><span class="line"><span class="comment">    d: "4"</span></span><br><span class="line"><span class="comment">length: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="使用async-await"><a href="#使用async-await" class="headerlink" title="使用async/await"></a>使用async/await</h2><p>使用async函数之前可能还需要了解一下Generator函数。</p><h3 id="Generator函数介绍"><a href="#Generator函数介绍" class="headerlink" title="Generator函数介绍"></a>Generator函数介绍</h3><p>Generator函数不同于普通的函数。它在函数名前面会有一个<code>*</code>的标志，而且内部可以使用<code>yeild</code>使得Generator函数具有一些状态，不会一次执行完毕。</p><p>Generator函数可以通过调用<code>next()</code>方法执行到下一个<code>yeild</code>，每次会返回一个包含<code>{value: , done: }</code>的对象，为<code>yeild</code>后面的表达式的结果。可以给<code>next()</code>函数传递值，使得这个值为上一个<code>yeild</code>表达式的返回结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resA = <span class="keyword">yield</span> <span class="string">'1'</span></span><br><span class="line">    <span class="built_in">console</span>.log(resA)</span><br><span class="line">    <span class="keyword">let</span> resB = <span class="keyword">yield</span> <span class="string">'2'</span></span><br><span class="line">    <span class="built_in">console</span>.log(resB)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'3'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时还未执行gen()</span></span><br><span class="line"><span class="keyword">let</span> gen = genFunc()</span><br><span class="line"><span class="comment">// 开始执行第一个yield(yield '1')</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next())</span><br><span class="line"><span class="comment">// 执行第二个yeild(yield '2')，传入的参数为上一个yield的返回值，因此genFunc()中的resA='A'</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next(<span class="string">'A'</span>))</span><br><span class="line"><span class="comment">// 执行第三个yeild(return '3')，resB的值与上面同理</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next(<span class="string">'B'</span>))</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fzczojv8eij30di0e4q35.jpg" alt=""></p><h3 id="async-await介绍"><a href="#async-await介绍" class="headerlink" title="async/await介绍"></a>async/await介绍</h3><p><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">async函数介绍</a></p><p>async/await主要是将Generator函数的<code>*</code>替换为<code>async</code>，将<code>yield</code>替换为<code>await</code>，而且<code>await</code>后面需要跟<code>promise</code>，并且等待其执行完成，得到其执行结果；如果不是<code>promise</code>的话，会立即返回其值。另外<code>async</code>函数的返回值是一个<code>promise</code>。</p><h3 id="实现异步-1"><a href="#实现异步-1" class="headerlink" title="实现异步"></a>实现异步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = [<span class="string">'./data/a.json'</span>, <span class="string">'./data/b.json'</span>]</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchFilesData</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promises = files.map(<span class="keyword">async</span> (file) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> resp = <span class="keyword">await</span> fetch(file) <span class="comment">// 此时await等待fetch的结果，但是这个过程是并发fetch</span></span><br><span class="line">        <span class="keyword">return</span> resp.json()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises) <span class="comment">// 此时await等待并获取了Promise.all()的执行结果</span></span><br><span class="line">&#125;</span><br><span class="line">fetchFilesData(files).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(results) &#125;) <span class="comment">// 最后这里还是用.then()去获取，不知道是否存在不用.then()的方法</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fzdakdiruyj304t02j743.jpg" alt=""></p><h2 id="使用axios替代fetch"><a href="#使用axios替代fetch" class="headerlink" title="使用axios替代fetch"></a>使用axios替代fetch</h2><p>听同学说用<code>axios</code>替代<code>fetch</code>会更好，经过查阅资料，主要是有<code>axios</code>从浏览器中创建 XMLHttpRequest，然而<code>fetch</code>是es规范中的实现方式，脱离了XMLHttpRequest，需要更多的配置。具体其他的区别需要在其他使用场景中去注意。</p><p>下面是两个方法的返回值的区别：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = [<span class="string">'./data/a.json'</span>, <span class="string">'./data/b.json'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'fetch:'</span>, fetch(files[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'axios:'</span>, axios.get(files[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fzdd499tbej30f20ct3yx.jpg" alt=""></p><p>可以看到两者的区别。</p><h3 id="实现异步-2"><a href="#实现异步-2" class="headerlink" title="实现异步"></a>实现异步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = [<span class="string">'./data/a.json'</span>, <span class="string">'./data/b.json'</span>]</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchFilesData</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promises = files.map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.get(file) <span class="comment">// 得到一个返回response的promise</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line">&#125;</span><br><span class="line">fetchFilesData(files).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123; <span class="keyword">return</span> results.map(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;<span class="keyword">return</span> result.data&#125;) &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(data)&#125;)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于不同实现方式的优点和缺点，以及原理尚还不是很清晰，特别是axios和fetch两者，还需要再多多学习。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> 问题记录 </tag>
            
            <tag> JavaScipt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端css样式覆盖问题</title>
      <link href="/2019/01/10/%E5%89%8D%E7%AB%AFcss%E6%A0%B7%E5%BC%8F%E8%A6%86%E7%9B%96/"/>
      <url>/2019/01/10/%E5%89%8D%E7%AB%AFcss%E6%A0%B7%E5%BC%8F%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>今天在使用 D3 的时候遇到一个 css 的问题，这里留作记录防止以后踩坑。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在使用 d3 添加鼠标响应事件，想要修改 css，结果不会修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rec = svg.append(<span class="string">"rect"</span>)</span><br><span class="line">  .attr(<span class="string">"class"</span>, <span class="string">"view"</span>)</span><br><span class="line">  .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span><br><span class="line">  .attr(<span class="string">"y"</span>, <span class="number">1</span>)</span><br><span class="line">  .attr(<span class="string">"width"</span>, width - <span class="number">2</span>)</span><br><span class="line">  .attr(<span class="string">"height"</span>, height - <span class="number">2</span>)</span><br><span class="line">  .attr(<span class="string">"fill"</span>, <span class="string">"gray"</span>)</span><br><span class="line">  .style(<span class="string">"stroke"</span>, <span class="string">"red"</span>)</span><br><span class="line">  .style(<span class="string">"stroke-width"</span>, <span class="string">"2px"</span>)</span><br><span class="line">  .on(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    d3.select(<span class="keyword">this</span>).classed(<span class="string">"hover"</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    d3.select(<span class="keyword">this</span>).classed(<span class="string">"hover"</span>, <span class="literal">false</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.view</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: blue;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view</span> &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: gold;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里添加了 <code>mouseover</code> 和 <code>mouseout</code> 事件，借此改变 <code>rect</code> 的样式，结果没有成功。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>折腾了好久，问了一下大佬立马解决。</p><p>打开 chrome 的调试工具。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fz1wr31s8yj30v20t6jws.jpg" alt="chrome"></p><p>可以看到这里 <code>.view:hover</code> 和 <code>.view</code> 都是被 <code>element.style</code> 覆盖了。</p><p>这个 <code>element.style</code> 一般是内联样式，因此查看自己的代码，发现在定义 <code>rect</code> 的时候已经定义了 <code>style</code> ： <code>.style(&quot;stroke&quot;, &quot;red&quot;).style(&quot;stroke-width&quot;, &quot;2px&quot;)</code>。</p><p>将这两句去掉，可以得到最终结果：</p><blockquote><p>hover</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fz1wxcf7m0j306y06ct8k.jpg" alt="hover"></p><blockquote><p>unhover</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz1wxja7ajj306806aq2s.jpg" alt="unhover"></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><blockquote><p>D3Component.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">'d3'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./D3Component.css'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D3Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">let</span> svg = d3.select(<span class="string">"svg"</span>),</span><br><span class="line">      width = +svg.attr(<span class="string">"width"</span>),</span><br><span class="line">      height = +svg.attr(<span class="string">"height"</span>);</span><br><span class="line">    <span class="keyword">let</span> rec = svg.append(<span class="string">"rect"</span>)</span><br><span class="line">      .attr(<span class="string">"class"</span>, <span class="string">"view"</span>)</span><br><span class="line">      .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span><br><span class="line">      .attr(<span class="string">"y"</span>, <span class="number">1</span>)</span><br><span class="line">      .attr(<span class="string">"width"</span>, width - <span class="number">2</span>)</span><br><span class="line">      .attr(<span class="string">"height"</span>, height - <span class="number">2</span>)</span><br><span class="line">      .attr(<span class="string">"fill"</span>, <span class="string">"gray"</span>)</span><br><span class="line">      <span class="comment">// .style("stroke", "red")</span></span><br><span class="line">      <span class="comment">// .style("stroke-width", "2px")</span></span><br><span class="line">      .on(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        d3.select(<span class="keyword">this</span>).classed(<span class="string">"hover"</span>, <span class="literal">true</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .on(<span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        d3.select(<span class="keyword">this</span>).classed(<span class="string">"hover"</span>, <span class="literal">false</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;svg id=<span class="string">"svg"</span> width=<span class="string">"100"</span> height=<span class="string">"100"</span>&gt;&lt;/svg&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default D3Component;</span></span><br></pre></td></tr></table></figure><blockquote><p>D3Component.css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.view</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: blue;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view</span> &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: gold;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> 问题记录 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/15/Hello-World/"/>
      <url>/2018/12/15/Hello-World/</url>
      
        <content type="html"><![CDATA[<p>本人是广东某双非本科的计算机系蒟蒻一枚，大一到大三接触过ACM，之后开始接触Java备战春招，暑假在杭州实习。虽然秋招以Java后台开发为目标，但是去了广州某无人驾驶公司，主要使用Python（学了一年的Java最终丢了233）。之前一直是用博客园和简书写一些东西，前两周入职了，开始接触新的东西，建立这个博客也算是新的启程吧。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
