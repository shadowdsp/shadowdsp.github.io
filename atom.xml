<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shadowdsp</title>
  
  <subtitle>我的青春Coding物语果然有问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-20T13:37:58.565Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>shadowdsp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js中异步获取文件集并返回结果集</title>
    <link href="http://yoursite.com/2019/01/20/js%E4%B8%AD%E5%BC%82%E6%AD%A5%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E9%9B%86%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E9%9B%86/"/>
    <id>http://yoursite.com/2019/01/20/js中异步获取文件集并返回结果集/</id>
    <published>2019-01-20T13:27:50.000Z</published>
    <updated>2019-01-20T13:37:58.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近在使用js中经常遇到需要去异步获取文件并对文件内容进行处理的需求。</p><p>详细的需求是：同时去异步获取多个文件，然后将多个文件的结果聚合起来，返回。</p><p>但是关于这样的做法有不少的实现方式，在这里主要做一个总结。</p><h1 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h1><p>我先在项目中放置了两个需要获取的json文件。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fzcxkhbgfzj30bk0diglo.jpg" alt=""></p><blockquote><p>a.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"a"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"b"</span>: <span class="string">"2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>b.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"c"</span>: <span class="string">"3"</span>,</span><br><span class="line">  <span class="attr">"d"</span>: <span class="string">"4"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来开始获取这两个文件。</p><h2 id="只使用-Promise-then"><a href="#只使用-Promise-then" class="headerlink" title="只使用 Promise/then"></a>只使用 Promise/then</h2><h3 id="Promise-then介绍"><a href="#Promise-then介绍" class="headerlink" title="Promise/then介绍"></a>Promise/then介绍</h3><p><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Promise介绍</a></p><p>关于 Promise，可以看上面的链接，介绍的十分详细。</p><p>Promise有一个resolve()方法，将Promise对象的pending状态转化为resolved状态，并将操作的结果作为参数传递出去：例如 <code>new Promise((resolve, reject) =&gt; { resolve(&#39;123&#39;) })</code>，这里会将<code>&#39;123&#39;</code>作为Promise的结果传递出去。</p><p>接着可以用then方法去获取结果。then方法只能跟在Promise的后面，因此then方法的两个形参分别是Promise的resolve()方法传入的参数和reject()方法传入的参数。</p><p>一个小例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; resolve(<span class="string">'123'</span>) &#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h3 id="实现异步"><a href="#实现异步" class="headerlink" title="实现异步"></a>实现异步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = [<span class="string">'./data/a.json'</span>, <span class="string">'./data/b.json'</span>] <span class="comment">// 放在相对于index.html目录下的两个json文件</span></span><br><span class="line"><span class="keyword">let</span> promises = files.map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fetch(file).then(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(resp.json()) <span class="comment">// resp.json() is a promise，resolve(resp.json())将包含的文件结果的promise传递出去</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'A : '</span>, promises) <span class="comment">// two promises</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A :  </span></span><br><span class="line"><span class="comment">(2) [Promise, Promise]</span></span><br><span class="line"><span class="comment">    0: Promise</span></span><br><span class="line"><span class="comment">      [[PromiseStatus]]: "resolved"</span></span><br><span class="line"><span class="comment">      [[PromiseValue]]: Object</span></span><br><span class="line"><span class="comment">        a: "1"</span></span><br><span class="line"><span class="comment">        b: "2"</span></span><br><span class="line"><span class="comment">    1: Promise &#123;&lt;resolved&gt;: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">    length: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.all()将promises数组转化为一个promise，并获取promises内部的promise的返回值，并将返回值以一个数组的形式传递出去</span></span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(results) &#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(2) [&#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"><span class="comment">    0:</span></span><br><span class="line"><span class="comment">    a: "1"</span></span><br><span class="line"><span class="comment">    b: "2"</span></span><br><span class="line"><span class="comment">1:</span></span><br><span class="line"><span class="comment">    c: "3"</span></span><br><span class="line"><span class="comment">    d: "4"</span></span><br><span class="line"><span class="comment">length: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="使用async-await"><a href="#使用async-await" class="headerlink" title="使用async/await"></a>使用async/await</h2><p>使用async函数之前可能还需要了解一下Generator函数。</p><h3 id="Generator函数介绍"><a href="#Generator函数介绍" class="headerlink" title="Generator函数介绍"></a>Generator函数介绍</h3><p>Generator函数不同于普通的函数。它在函数名前面会有一个<code>*</code>的标志，而且内部可以使用<code>yeild</code>使得Generator函数具有一些状态，不会一次执行完毕。</p><p>Generator函数可以通过调用<code>next()</code>方法执行到下一个<code>yeild</code>，每次会返回一个包含<code>{value: , done: }</code>的对象，为<code>yeild</code>后面的表达式的结果。可以给<code>next()</code>函数传递值，使得这个值为上一个<code>yeild</code>表达式的返回结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resA = <span class="keyword">yield</span> <span class="string">'1'</span></span><br><span class="line">    <span class="built_in">console</span>.log(resA)</span><br><span class="line">    <span class="keyword">let</span> resB = <span class="keyword">yield</span> <span class="string">'2'</span></span><br><span class="line">    <span class="built_in">console</span>.log(resB)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'3'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时还未执行gen()</span></span><br><span class="line"><span class="keyword">let</span> gen = genFunc()</span><br><span class="line"><span class="comment">// 开始执行第一个yield(yield '1')</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next())</span><br><span class="line"><span class="comment">// 执行第二个yeild(yield '2')，传入的参数为上一个yield的返回值，因此genFunc()中的resA='A'</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next(<span class="string">'A'</span>))</span><br><span class="line"><span class="comment">// 执行第三个yeild(return '3')，resB的值与上面同理</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next(<span class="string">'B'</span>))</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fzczojv8eij30di0e4q35.jpg" alt=""></p><h3 id="async-await介绍"><a href="#async-await介绍" class="headerlink" title="async/await介绍"></a>async/await介绍</h3><p><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">async函数介绍</a></p><p>async/await主要是将Generator函数的<code>*</code>替换为<code>async</code>，将<code>yield</code>替换为<code>await</code>，而且<code>await</code>后面需要跟<code>promise</code>，并且等待其执行完成，得到其执行结果；如果不是<code>promise</code>的话，会立即返回其值。另外<code>async</code>函数的返回值是一个<code>promise</code>。</p><h3 id="实现异步-1"><a href="#实现异步-1" class="headerlink" title="实现异步"></a>实现异步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = [<span class="string">'./data/a.json'</span>, <span class="string">'./data/b.json'</span>]</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchFilesData</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promises = files.map(<span class="keyword">async</span> (file) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> resp = <span class="keyword">await</span> fetch(file) <span class="comment">// 此时await等待fetch的结果，但是这个过程是并发fetch</span></span><br><span class="line">        <span class="keyword">return</span> resp.json()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises) <span class="comment">// 此时await等待并获取了Promise.all()的执行结果</span></span><br><span class="line">&#125;</span><br><span class="line">fetchFilesData(files).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(results) &#125;) <span class="comment">// 最后这里还是用.then()去获取，不知道是否存在不用.then()的方法</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fzdakdiruyj304t02j743.jpg" alt=""></p><h2 id="使用axios替代fetch"><a href="#使用axios替代fetch" class="headerlink" title="使用axios替代fetch"></a>使用axios替代fetch</h2><p>听同学说用<code>axios</code>替代<code>fetch</code>会更好，经过查阅资料，主要是有<code>axios</code>从浏览器中创建 XMLHttpRequest，然而<code>fetch</code>是es规范中的实现方式，脱离了XMLHttpRequest，需要更多的配置。具体其他的区别需要在其他使用场景中去注意。</p><p>下面是两个方法的返回值的区别：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = [<span class="string">'./data/a.json'</span>, <span class="string">'./data/b.json'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'fetch:'</span>, fetch(files[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'axios:'</span>, axios.get(files[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fzdd499tbej30f20ct3yx.jpg" alt=""></p><p>可以看到两者的区别。</p><h3 id="实现异步-2"><a href="#实现异步-2" class="headerlink" title="实现异步"></a>实现异步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = [<span class="string">'./data/a.json'</span>, <span class="string">'./data/b.json'</span>]</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchFilesData</span>(<span class="params">files</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promises = files.map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.get(file) <span class="comment">// 得到一个返回response的promise</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line">&#125;</span><br><span class="line">fetchFilesData(files).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123; <span class="keyword">return</span> results.map(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;<span class="keyword">return</span> result.data&#125;) &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(data)&#125;)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于不同实现方式的优点和缺点，以及原理尚还不是很清晰，特别是axios和fetch两者，还需要再多多学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;最近在使用js中经常遇到需要去异步获取文件并对文件内容进行处理的需求。&lt;/p&gt;
&lt;p&gt;详细的需求是：同时去异步获取多个文件，然后将多个文件的
      
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="问题记录" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
      <category term="JavaScipt" scheme="http://yoursite.com/tags/JavaScipt/"/>
    
  </entry>
  
  <entry>
    <title>前端css样式覆盖问题</title>
    <link href="http://yoursite.com/2019/01/10/%E5%89%8D%E7%AB%AFcss%E6%A0%B7%E5%BC%8F%E8%A6%86%E7%9B%96/"/>
    <id>http://yoursite.com/2019/01/10/前端css样式覆盖/</id>
    <published>2019-01-10T15:42:58.000Z</published>
    <updated>2019-01-20T13:31:34.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>今天在使用 D3 的时候遇到一个 css 的问题，这里留作记录防止以后踩坑。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在使用 d3 添加鼠标响应事件，想要修改 css，结果不会修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rec = svg.append(<span class="string">"rect"</span>)</span><br><span class="line">  .attr(<span class="string">"class"</span>, <span class="string">"view"</span>)</span><br><span class="line">  .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span><br><span class="line">  .attr(<span class="string">"y"</span>, <span class="number">1</span>)</span><br><span class="line">  .attr(<span class="string">"width"</span>, width - <span class="number">2</span>)</span><br><span class="line">  .attr(<span class="string">"height"</span>, height - <span class="number">2</span>)</span><br><span class="line">  .attr(<span class="string">"fill"</span>, <span class="string">"gray"</span>)</span><br><span class="line">  .style(<span class="string">"stroke"</span>, <span class="string">"red"</span>)</span><br><span class="line">  .style(<span class="string">"stroke-width"</span>, <span class="string">"2px"</span>)</span><br><span class="line">  .on(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    d3.select(<span class="keyword">this</span>).classed(<span class="string">"hover"</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    d3.select(<span class="keyword">this</span>).classed(<span class="string">"hover"</span>, <span class="literal">false</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.view</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: blue;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view</span> &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: gold;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里添加了 <code>mouseover</code> 和 <code>mouseout</code> 事件，借此改变 <code>rect</code> 的样式，结果没有成功。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>折腾了好久，问了一下大佬立马解决。</p><p>打开 chrome 的调试工具。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fz1wr31s8yj30v20t6jws.jpg" alt="chrome"></p><p>可以看到这里 <code>.view:hover</code> 和 <code>.view</code> 都是被 <code>element.style</code> 覆盖了。</p><p>这个 <code>element.style</code> 一般是内联样式，因此查看自己的代码，发现在定义 <code>rect</code> 的时候已经定义了 <code>style</code> ： <code>.style(&quot;stroke&quot;, &quot;red&quot;).style(&quot;stroke-width&quot;, &quot;2px&quot;)</code>。</p><p>将这两句去掉，可以得到最终结果：</p><blockquote><p>hover</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fz1wxcf7m0j306y06ct8k.jpg" alt="hover"></p><blockquote><p>unhover</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fz1wxja7ajj306806aq2s.jpg" alt="unhover"></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><blockquote><p>D3Component.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> d3 <span class="keyword">from</span> <span class="string">'d3'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./D3Component.css'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D3Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">let</span> svg = d3.select(<span class="string">"svg"</span>),</span><br><span class="line">      width = +svg.attr(<span class="string">"width"</span>),</span><br><span class="line">      height = +svg.attr(<span class="string">"height"</span>);</span><br><span class="line">    <span class="keyword">let</span> rec = svg.append(<span class="string">"rect"</span>)</span><br><span class="line">      .attr(<span class="string">"class"</span>, <span class="string">"view"</span>)</span><br><span class="line">      .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span><br><span class="line">      .attr(<span class="string">"y"</span>, <span class="number">1</span>)</span><br><span class="line">      .attr(<span class="string">"width"</span>, width - <span class="number">2</span>)</span><br><span class="line">      .attr(<span class="string">"height"</span>, height - <span class="number">2</span>)</span><br><span class="line">      .attr(<span class="string">"fill"</span>, <span class="string">"gray"</span>)</span><br><span class="line">      <span class="comment">// .style("stroke", "red")</span></span><br><span class="line">      <span class="comment">// .style("stroke-width", "2px")</span></span><br><span class="line">      .on(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        d3.select(<span class="keyword">this</span>).classed(<span class="string">"hover"</span>, <span class="literal">true</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .on(<span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        d3.select(<span class="keyword">this</span>).classed(<span class="string">"hover"</span>, <span class="literal">false</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;svg id=<span class="string">"svg"</span> width=<span class="string">"100"</span> height=<span class="string">"100"</span>&gt;&lt;/svg&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default D3Component;</span></span><br></pre></td></tr></table></figure><blockquote><p>D3Component.css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.view</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: blue;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view</span> &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: gold;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h1&gt;&lt;p&gt;今天在使用 D3 的时候遇到一个 css 的问题，这里留作记录防止以后踩坑。&lt;/p&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; c
      
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="问题记录" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/12/15/Hello-World/"/>
    <id>http://yoursite.com/2018/12/15/Hello-World/</id>
    <published>2018-12-15T09:15:24.000Z</published>
    <updated>2018-12-15T09:33:48.666Z</updated>
    
    <content type="html"><![CDATA[<p>本人是广东某双非本科的计算机系蒟蒻一枚，大一到大三接触过ACM，之后开始接触Java备战春招，暑假在杭州实习。虽然秋招以Java后台开发为目标，但是去了广州某无人驾驶公司，主要使用Python（学了一年的Java最终丢了233）。之前一直是用博客园和简书写一些东西，前两周入职了，开始接触新的东西，建立这个博客也算是新的启程吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本人是广东某双非本科的计算机系蒟蒻一枚，大一到大三接触过ACM，之后开始接触Java备战春招，暑假在杭州实习。虽然秋招以Java后台开发为目标，但是去了广州某无人驾驶公司，主要使用Python（学了一年的Java最终丢了233）。之前一直是用博客园和简书写一些东西，前两周
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
